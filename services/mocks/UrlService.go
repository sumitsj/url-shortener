// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UrlService is an autogenerated mock type for the UrlService type
type UrlService struct {
	mock.Mock
}

// FormatShortUrl provides a mock function with given fields: shortKey
func (_m *UrlService) FormatShortUrl(shortKey string) string {
	ret := _m.Called(shortKey)

	if len(ret) == 0 {
		panic("no return value specified for FormatShortUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(shortKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateShortUrl provides a mock function with given fields: url
func (_m *UrlService) GenerateShortUrl(url string) (string, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GenerateShortUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOriginalUrlBy provides a mock function with given fields: shortenedUrl
func (_m *UrlService) GetOriginalUrlBy(shortenedUrl string) (string, error) {
	ret := _m.Called(shortenedUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalUrlBy")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(shortenedUrl)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(shortenedUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortenedUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUrlService creates a new instance of UrlService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlService {
	mock := &UrlService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
